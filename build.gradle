import java.nio.file.Files
import java.nio.file.Paths
import groovy.json.JsonSlurper
import groovy.json.JsonOutput

buildscript {
    repositories {
        jcenter()
        maven {
            url "http://sonar.dev.cwds.io:8081/artifactory/repo"
        }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath 'net.saliman:gradle-cobertura-plugin:2.4.0'
    }
}

plugins {
    id "java"
    id 'application'
    id 'net.saliman.cobertura' version '2.4.0'
    id "org.sonarqube" version "2.2.1"
}

apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: "net.saliman.cobertura"

sourceCompatibility = 1.8
applicationDefaultJvmArgs = ["-Djava.library.path=.:./lib:/var/lib/jenkins/workspace/API/lib:/usr/local/lib"]

project.ext {
    doraVersion = 0.21
    dropwizardVersion = "1.1.0"
    metricsVersion = "3.1.0"
    dropwizardSwaggerVersion = "1.0.0-1"

    dockerPort = 2376
    buildEnv = System.env.BUILD_ENV ?: 'JENKINS'
    
    mainclass = "gov.ca.cwds.rest.DoraApplication"
    elasticHost = System.env.ELASTIC_HOST ?: '192.168.99.100'
    elasticPort = 9200
    elasticPort2 = 9300
    configPath = "$rootProject.projectDir/config/"
    elasticUser = 'elastic'
    elasticPassword = 'changeme'
    elasticBaseUrl = "http://" + elasticHost + ":" + elasticPort
    
    targetDockerHubOrganization = System.env.DOCKERHUB_ORG ?: 'drudenko185'
    targetDockerHubRepository = 'elasticsearch-xpack-data'
    dockerImageName = targetDockerHubOrganization + '/' + targetDockerHubRepository // like 'cwds/cals-data-model'
    dockerContainerName = 'container-' + targetDockerHubRepository // like 'postgres-cals-data-model'
    dockerTag = version + ((System.properties.getProperty('build') != null) ? '.' + System.properties.getProperty('build') : '')
}

version = doraVersion
mainClassName = mainclass

repositories {
    //mavenLocal()
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "http://sonar.dev.cwds.io:8081/artifactory/repo" }
}

shadowJar {
    classifier = 'dist'
    baseName = 'dora'
    mergeServiceFiles()
    manifest {
        attributes 'Main-Class': mainclass
    }
    version = ''
}

dependencies {
    // Dropwizard-guice 1.0.0.2 conflicts with jersey-client 2.25.
    // Exclude transitive dependencies.
    compile('gov.ca.cwds.api:api-core:0.22.237') {
        exclude group: 'org.glassfish.jersey.core'
    }

    compile group: "io.dropwizard", name: "dropwizard-client", version: dropwizardVersion
    compile group: "io.dropwizard", name: "dropwizard-views", version: dropwizardVersion
    compile group: "io.dropwizard", name: "dropwizard-views-mustache", version: dropwizardVersion
    compile group: 'io.dropwizard', name: 'dropwizard-assets', version: dropwizardVersion
    compile group: "io.dropwizard", name: "dropwizard-testing", version: dropwizardVersion
    compile group: "io.dropwizard.metrics", name: "metrics-core", version: metricsVersion

    compile group: "org.glassfish.jersey.ext", name: "jersey-declarative-linking", version: "2.23.2"
    compile group: "javax.el", name: "javax.el-api", version: "2.2.4"
    compile group: "org.glassfish.web", name: "javax.el", version: "2.2.4"
    compile group: 'org.bouncycastle', name: 'bcprov-jdk16', version: '1.46'
    compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.3'
    compile group: 'org.slf4j', name: 'slf4j-ext', version: '1.7.22'

    compile group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.25.1'
    compile group: 'com.hubspot.dropwizard', name: 'dropwizard-guice', version: '1.0.6.0'

    compile 'com.fasterxml.jackson.module:jackson-module-guice:2.8.2'
    compile group: 'org.secnod.dropwizard', name: 'dropwizard-shiro', version: '0.2.0'

    compile fileTree(dir: 'lib', include: ['*.jar'])

    compile group: 'io.swagger', name: 'swagger-jersey2-jaxrs', version: '1.5.9'
    compile group: 'io.swagger', name: 'swagger-annotations', version: '1.5.9'
    compile group: 'org.json', name: 'json', version: '20090211'

    // testCompile 'org.glassfish.jersey.core:jersey-client:2.26-b01'
    testCompile 'org.mockito:mockito-core:2.0.54-beta'
    testCompile group: 'org.hamcrest', name: 'hamcrest-junit', version: '2.0.0.0'
    testCompile('org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.23.2') {
        exclude group: 'javax.servlet', module: 'javax.servlet-api'
        exclude group: 'junit', module: 'junit'
    }

    // https://mvnrepository.com/artifact/nl.jqno.equalsverifier/equalsverifier
    testCompile group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: '2.1.6'
    testCompile group: "com.github.fge", name: "json-schema-validator", version: "2.2.6"

    // https://mvnrepository.com/artifact/com.google.errorprone/error_prone_annotations
    testCompile group: 'com.google.errorprone', name: 'error_prone_annotations', version: '2.0.19'
}

tasks.withType(Test) {
    enableAssertions = true

    // These don't work. Docs mistaken?
    // jvmArgs '-Djava.library.path=.:$rootProject.projectDir/lib/:/var/lib/jenkins/workspace/API/:/usr/local/lib/'
    // jvmArgs '-Djava.library.path=.:./lib/:/var/lib/jenkins/workspace/API/:/usr/local/lib/'

    // Set system properties for the test JVM(s).
    // Gradle passed the literal string '$rootProject.projectDir' ???
    // systemProperty 'java.library.path', '.:$rootProject.projectDir/lib/:/var/lib/jenkins/workspace/API/:/usr/local/lib/'
    //systemProperty 'java.library.path', '.:./lib:/var/lib/jenkins/workspace/API/lib:/usr/local/lib'
}

test {
    exclude '**/*IT*'

    // These don't work. Docs mistaken?
    // jvmArgs '-Djava.library.path=.:$rootProject.projectDir/lib/:/var/lib/jenkins/workspace/API/:/usr/local/lib/'

    // Set system properties for the test JVM(s).
    // Gradle passes the literal string '$rootProject.projectDir' ???
    // systemProperty 'java.library.path', '.:$rootProject.projectDir/lib/:/var/lib/jenkins/workspace/API/:/usr/local/lib/'
    //systemProperty 'java.library.path', '.:./lib:/var/lib/jenkins/workspace/API/lib:/usr/local/lib'
}

task integrationTest(type: Test, dependsOn: testClasses) {
    include '**/*IT*'
    exclude '**/*Test*'
    //exclude '**/*'
}

run {
    args "server", configPath + "dora.yml"
}

cobertura {
    // See story #137202471 about the mounting evils of Cobertura ... :-)
    // Cobertura does not recognize Java 8 features, like interface defaults or lambda.

    coverageFormats = ['xml', 'html']
    coverageIgnoreTrivial = true

    coverageExcludes = ['org.slf4j.Logger.*', '.*gov\\.ca\\.cwds\\.rest\\.api\\..*Response.*']
    coverageIgnores = ['org.slf4j.Logger.*']
    coverageReportDir = new File("$buildDir/reports/cobertura")
}

publishing {
    publications {
        library(MavenPublication) {
            from components.java
            groupId 'gov.ca.cwds.services'
            artifactId 'dora'
            version version + ((System.properties.getProperty('build') != null) ? '.' + System.properties.getProperty('build') : '')
        }
    }
    repositories {
        maven {
            url "http://sonar.dev.cwds.io:8081/artifactory/libs-snapshot"
        }
    }
}


def esConnect(baseUrl) {
    int responseCode = 0
    while (true) {
        try {
            responseCode = esExecute("GET", "/_xpack/security/role", null)
        } catch (Exception e) {
            //continue
        }
        if (responseCode == 200) {
            return
        }
        println "retrying to connect to " + baseUrl + " ... "
        sleep(5000)
    }
}

def esExecute(String method, String path, String content) {
    URL url = new URL(elasticBaseUrl + path)
    HttpURLConnection connection = (HttpURLConnection) url.openConnection()
    connection.setDoInput(true)
    connection.setDoOutput(true)
    connection.setRequestMethod(method)
    String authString = elasticUser + ":" + elasticPassword
    String authStringEnc = authString.bytes.encodeBase64().toString()
    connection.setRequestProperty("Authorization", "Basic " + authStringEnc);
    connection.setRequestProperty("Content-Type", "application/json")

    if (content != null) {
        OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream(), "UTF8")
        writer.write(content);
        writer.close();
    }

    BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), "UTF8"));
    StringBuilder jsonString = new StringBuilder();
    String line
    while ((line = reader.readLine()) != null) {
        jsonString.append(line)
    }
    print jsonString
    int responseCode = connection.getResponseCode()
    connection.disconnect()
    return responseCode
}

def isPortOpen(host, port) {
    try {
        Socket socket = new Socket(host, port)
        socket.close()
        return true
    } catch (IOException e) {
        return false
    }
}

task printConfig {
    doLast {
        project.ext.properties
                .sort { e1, e2 -> e1.key <=> e2.key }
                .each { k, v -> println "${k} = " + v }
    }
}

task createBuildDir {
    mkdir project.buildDir
}


task checkDockerService {
    enabled = project.buildEnv == 'WIN_DEV'
    doFirst {
        if (!isPortOpen(elasticHost, dockerPort)) {
            throw new GradleException('Docker service is not available. Windows users should start Docker Quickstart Terminal of Docker Toolbox')
        }
    }
    doLast {
        def dockerEnvVars = [:]
        dockerEnvVars['DOCKER_CERT_PATH'] = System.getProperty("user.home") + '/.docker/machine/machines/default'
        dockerEnvVars['DOCKER_HOST'] = "tcp://$elasticHost:$dockerPort"
        dockerEnvVars['DOCKER_MACHINE_NAME'] = 'default'
        dockerEnvVars['DOCKER_TLS_VERIFY'] = 1
        tasks.withType(Exec) { environment << dockerEnvVars }
    }
}

task dockerRemoveContainer(type: Exec, dependsOn: checkDockerService) {
    ignoreExitValue true
    doFirst {
        commandLine 'docker', 'rm', '-v', '--force', dockerContainerName
    }
}

task dockerCreateImage(type: Exec, dependsOn: [checkDockerService, dockerRemoveContainer]) {
    doFirst {
        //standardInput = new FileInputStream(file("$projectDir/Dockerfile"))
        commandLine 'docker', 'build', '-t', dockerImageName, '-f', './docker/Dockerfile', './docker'
    }
}

task dockerStartContainer(type: Exec, dependsOn: [checkDockerService, dockerCreateImage]) {
    doFirst {
        commandLine 'docker', 'run', '-it', '-d', "--name=$dockerContainerName", '-p', "$elasticPort:9200", '-p', "$elasticPort2:9300", dockerImageName
    }

    doLast {
        esConnect(elasticBaseUrl)
    }
}

task dockerPopulate(dependsOn: dockerStartContainer) {
    doFirst {
        new JsonSlurper().parseText(new String(Files.readAllBytes(Paths.get("$projectDir/docker/data.json")))).each {
            String [] action = it.action.toString().split("\\s")
            String content = it.data == null ? null : JsonOutput.toJson(it.data)
            esExecute(action[0], action[1], content)
        }
    }
}

task dockerCommitPopulatedImage(type: Exec, dependsOn: [checkDockerService, dockerPopulate]) {
    doFirst {
        commandLine 'docker', 'commit', '-m', 'populated', dockerContainerName, dockerImageName
    }
}

task dockerStopContainer(type: Exec, dependsOn: checkDockerService) {
    doFirst {
        commandLine 'docker', 'stop', dockerContainerName
    }
}

task dockerTagImage(type: Exec, dependsOn: [checkDockerService, dockerCommitPopulatedImage]) {
    doFirst {
        commandLine 'docker', 'tag', dockerImageName, "$dockerImageName:$dockerTag"
    }
}

task dockerPushTaggedVersion(type: Exec, dependsOn: [checkDockerService, dockerTagImage]) {
    doFirst {
        commandLine 'docker', 'push', "$dockerImageName:$dockerTag"
    }
}

task dockerPushLatestVersion(type: Exec, dependsOn: [checkDockerService, dockerCommitPopulatedImage]) {
    doFirst {
        commandLine 'docker', 'push', "$dockerImageName:latest"
    }
}

task dockerPublish(dependsOn: [dockerStopContainer, dockerPushTaggedVersion, dockerPushLatestVersion]) {
    doLast {
        println 'Published'
    }
}
