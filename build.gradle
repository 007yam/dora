buildscript {
    repositories {
        jcenter()
        maven {
            url "http://sonar.dev.cwds.io:8081/artifactory/repo"
        }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}

plugins {
    id "java"
    id 'application'
    id 'net.ltgt.apt' version '0.9'
    id "org.sonarqube" version "2.2.1"
}

apply plugin: "jacoco"
apply plugin: 'maven-publish'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'


sonarqube {
    properties {
        property "sonar.projectName", "${name}"
        property "sonar.projectKey", "${group}:${name}"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${project.buildDir}/jacocoHtml"
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'org/hibernate/*'
            ])
        })
    }
}

sourceCompatibility = 1.8
applicationDefaultJvmArgs = ["-Djava.library.path=.:./lib:/var/lib/jenkins/workspace/API/lib:/usr/local/lib"]

project.ext {
    projectGroup = 'gov.ca.cwds.services'
    projectVersion = '3.1-SNAPSHOT'
    dropwizardVersion = "1.1.0"
    metricsVersion = "3.1.0"
    dropwizardSwaggerVersion = "1.0.0-1"

    mainclass = "gov.ca.cwds.rest.DoraApplication"
    configPath = "$rootProject.projectDir/config/"
    
    targetDockerHubOrganization = System.env.DOCKERHUB_ORG ?: 'cwds'

    buildEnv = System.env.BUILD_ENV ?: 'JENKINS'
    devDockerHost = System.env.DEV_DOCKER_HOST ?: '192.168.99.100'
    devDockerPort = 2376
}

version = projectVersion
mainClassName = mainclass

repositories {
    //mavenLocal()
    mavenCentral()
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url "http://sonar.dev.cwds.io:8081/artifactory/repo" }
}

shadowJar {
    classifier = 'dist'
    baseName = 'dora'
    mergeServiceFiles()
    manifest {
        attributes 'Main-Class': mainclass
    }
    version = projectVersion
}

dependencies {
    // Dropwizard-guice 1.0.0.2 conflicts with jersey-client 2.25.
    // Exclude transitive dependencies.
    compile('gov.ca.cwds.api:api-core:0.22.237') {
        exclude group: 'org.glassfish.jersey.core'
    }

    compile group: "io.dropwizard", name: "dropwizard-client", version: dropwizardVersion
    compile group: "io.dropwizard", name: "dropwizard-views", version: dropwizardVersion
    compile group: "io.dropwizard", name: "dropwizard-views-mustache", version: dropwizardVersion
    compile group: 'io.dropwizard', name: 'dropwizard-assets', version: dropwizardVersion
    compile group: "io.dropwizard", name: "dropwizard-testing", version: dropwizardVersion
    compile group: "io.dropwizard.metrics", name: "metrics-core", version: metricsVersion

    compile group: "org.glassfish.jersey.ext", name: "jersey-declarative-linking", version: "2.23.2"
    compile group: "javax.el", name: "javax.el-api", version: "2.2.4"
    compile group: "org.glassfish.web", name: "javax.el", version: "2.2.4"
    compile group: 'org.bouncycastle', name: 'bcprov-jdk16', version: '1.46'
    compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.3'
    compile group: 'org.slf4j', name: 'slf4j-ext', version: '1.7.22'

    compile group: 'org.glassfish.jersey.core', name: 'jersey-client', version: '2.25.1'
    compile group: 'com.hubspot.dropwizard', name: 'dropwizard-guice', version: '1.0.6.0'

    compile 'com.fasterxml.jackson.module:jackson-module-guice:2.8.2'
    compile group: 'org.secnod.dropwizard', name: 'dropwizard-shiro', version: '0.2.0'

    compile fileTree(dir: 'lib', include: ['*.jar'])

    compile group: 'io.swagger', name: 'swagger-jersey2-jaxrs', version: '1.5.9'
    compile group: 'io.swagger', name: 'swagger-annotations', version: '1.5.9'
    compile group: 'org.json', name: 'json', version: '20090211'

    // testCompile 'org.glassfish.jersey.core:jersey-client:2.26-b01'
    testCompile 'org.mockito:mockito-core:2.0.54-beta'
    testCompile group: 'org.hamcrest', name: 'hamcrest-junit', version: '2.0.0.0'
    testCompile('org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:2.23.2') {
        exclude group: 'javax.servlet', module: 'javax.servlet-api'
        exclude group: 'junit', module: 'junit'
    }

    // https://mvnrepository.com/artifact/nl.jqno.equalsverifier/equalsverifier
    testCompile group: 'nl.jqno.equalsverifier', name: 'equalsverifier', version: '2.1.6'
    testCompile group: "com.github.fge", name: "json-schema-validator", version: "2.2.6"

    // https://mvnrepository.com/artifact/com.google.errorprone/error_prone_annotations
    testCompile group: 'com.google.errorprone', name: 'error_prone_annotations', version: '2.0.19'
}

task printConfig {
    doLast {
        project.ext.properties
                .sort { e1, e2 -> e1.key <=> e2.key }
                .each { k, v -> println "${k} = " + v }
    }
}

tasks.withType(Test) {
    enableAssertions = true
}

test {
    exclude '**/*IT*'
}

task integrationTest(type: Test, dependsOn: testClasses) {
    include '**/*IT*'
    exclude '**/*Test*'
}

run {
    args "server", configPath + "dora.yml"
}


publishing {
    publications {
        library(MavenPublication) {
            from components.java
            groupId projectGroup
            artifactId rootProject.name
            version version + ((System.properties.getProperty('build') != null) ? '.' + System.properties.getProperty('build') : '')
        }
    }
    repositories {
        maven {
            url "http://sonar.dev.cwds.io:8081/artifactory/libs-snapshot"
        }
    }
}

// reused in sub-modules
def isPortOpen(host, port) {
    try {
        Socket socket = new Socket(host, port)
        socket.close()
        return true
    } catch (IOException e) {
        return false
    }
}

// reused in sub-modules
task checkDockerService {
    enabled = project.buildEnv == 'WIN_DEV'
    doFirst {
        if (!isPortOpen(project.devDockerHost, project.devDockerPort)) {
            throw new GradleException('Docker service is not available. Windows users should start Docker Quickstart Terminal of Docker Toolbox')
        }
    }
    doLast {
        def dockerEnvVars = [:]
        dockerEnvVars['DOCKER_CERT_PATH'] = System.getProperty("user.home") + '/.docker/machine/machines/default'
        dockerEnvVars['DOCKER_HOST'] = "tcp://$project.devDockerHost:$project.devDockerPort"
        dockerEnvVars['DOCKER_MACHINE_NAME'] = 'default'
        dockerEnvVars['DOCKER_TLS_VERIFY'] = 1

        childProjects.each {
            k, childProject -> childProject.tasks.withType(Exec) { environment << dockerEnvVars }
        }
    }
}
